#!/bin/sh

#===============================================================================
# sexagesimal-time
# sexagesimal-zeit
# Berechnen Sie die sexagesimale Dauer, indem Sie die Endzeit von der Startzeit subtrahieren
#===============================================================================

# Abhängigkeiten:
# awk

#===============================================================================
# Skriptnutzung
#===============================================================================


usage () {
# Wenn das Argument an die Funktion übergeben wird, echo es
[ -z "${1}" ] || echo "! ${1}"
# Hilfe anzeigen
echo "\
Berechnen Sie die sexagesimale Dauer, indem Sie die Endzeit von der Startzeit subtrahieren
$(basename "$0") -s 00:00:00 -e 00:00:00"
exit 2
}


#===============================================================================
# Fehlermeldungen
#===============================================================================

INVALID_OPT_ERR='Ungültige Option:'
REQ_ARG_ERR='Erfordert ein Argument'
WRONG_ARGS_ERR='Falsche Anzahl an Argumenten an Skript übergeben'


#===============================================================================
# Überprüfen Sie die Anzahl der an das Skript übergebenen Argumente
#===============================================================================

[ $# -gt 0 ] || usage "${WRONG_ARGS_ERR}"


#===============================================================================
# getopts überprüft die an das Skript übergebenen Optionen
#===============================================================================

while getopts ':s:e:h' opt
do
  case ${opt} in
     s) start="${OPTARG}";;
     h) usage;;
     e) end="${OPTARG}";;
     \?) usage "${INVALID_OPT_ERR} ${OPTARG}" 1>&2;;
     :) usage "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2;;
  esac
done
shift $((OPTIND-1))


#===============================================================================
# Funktion
#===============================================================================

sexagesimal () {
printf "%s %s\n" "${start}" "${end}" \
| awk '
        {
          start = $1
          end = $2
          if (start ~ /:/) {
            split(start, t, ":")
            sseconds = (t[1] * 3600) + (t[2] * 60) + t[3] 
          }
          if (end ~ /:/) {
            split(end, t, ":")
            eseconds = (t[1] * 3600) + (t[2] * 60) + t[3] 
          }
          duration = eseconds - sseconds
          printf("%s\n"), duration
     }' \
| awk -F. 'NF==1 { printf("%02d:%02d:%02d\n"), ($1 / 3600), ($1 % 3600 / 60), ($1 % 60) }\
NF==2 { printf("%02d:%02d:%02d.%s\n"), ($1 / 3600), ($1 % 3600 / 60), ($1 % 60), ($2) }'
}


#===============================================================================
# Funktion ausführen
#===============================================================================

sexagesimal 

