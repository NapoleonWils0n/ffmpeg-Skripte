#!/bin/sh

#===============================================================================
# nomalize
# normalisieren
# Audiopegel normalisieren
#===============================================================================

# Abhängigkeiten:
# ffmpeg file awk tail

#===============================================================================
# Verwendung von Skripten
#===============================================================================

usage()
{
echo "\
# Audiopegel normalisieren

$(basename "$0") -i eingang.(mp4|mkv|mov|m4v|aac|m4a|wav|mp3) -o ausgang.(mp4|mkv|mov|m4v|aac|m4a|wav|mp3)
-i eingang.(mp4|mkv|mov|m4v|aac|m4a|wav|mp3)
-o ausgang.(mp4|mkv|mov|m4v|aac|m4a|wav|mp3) : optionales Argument
# Wenn die Option nicht bereitgestellt wird, wird standardmäßig Eingabename-normalisierte-Datum-Uhrzeit-Erweiterung verwendet"
exit 2
}


#===============================================================================
# Fehlermeldungen
#===============================================================================

INVALID_OPT_ERR='Ungültige Option:'
REQ_ARG_ERR='erfordert eine Argumentation'
WRONG_ARGS_ERR='falsche Anzahl von Argumenten an Skript übergeben'
NOT_MEDIA_FILE_ERR='ist keine Mediendatei'


#===============================================================================
# Überprüfen Sie die Anzahl der an das Skript übergebenen Argumente
#===============================================================================

[ $# -gt 0 ] || usage "${WRONG_ARGS_ERR}"


#===============================================================================
# getopts überprüft die an das Skript übergebenen Optionen
#===============================================================================

while getopts ':i:o:h' opt
do
  case ${opt} in
     i) infile="${OPTARG}";;
     o) outfile="${OPTARG}";;
     h) usage;;
     \?) usage "${INVALID_OPT_ERR} ${OPTARG}" 1>&2;;
     :) usage "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2;;
  esac
done
shift $((OPTIND-1))


#===============================================================================
# variablen
#===============================================================================

# Eingabe, Eingabename
infile_nopath="${infile##*/}"
infile_name="${infile_nopath%.*}"
infile_ext="${infile##*.}"

# file Befehl überprüft den MIME-Typ der Eingabedatei
filetype="$(file --mime-type -b "${infile}")"

# Audio- und Video-Mime-Typen
mov_mime='video/quicktime'
mkv_mime='video/x-matroska'
mp4_mime='video/mp4'
m4v_mime='video/x-m4v'
wav_mime='audio/x-wav'
audio_mime='audio/mpeg'
aac_mime='audio/x-hx-aac-adts'
m4a_mime='audio/mp4'

# Der Dateibefehl identifiziert .m4a-Audio fälschlicherweise als Videodatei
# Also prüfen wir, ob die Dateierweiterung .m4a ist und setzen den MIME-Typ auf audio/mp4
if [ "${infile_ext}" = 'm4a' ]; then
    filetype="${m4a_mime}"
fi

# Überprüfen Sie den MIME-Typ der Datei
case "${filetype}" in
    "${mov_mime}"|"${mkv_mime}"|"${mp4_mime}"|"${m4v_mime}"| \
    "${wav_mime}"|"${audio_mime}"|"${aac_mime}"|"${m4a_mime}");;
    *) usage "${infile} ${NOT_MEDIA_FILE_ERR}";;
esac

# Analysedatei drucken
echo '+ Datei mit ffmpeg analysieren'

# ffmpeg loudnorm erhält Statistiken aus der Datei
normalize=$(ffmpeg \
-hide_banner \
-i "${infile}" \
-af "loudnorm=I=-16:dual_mono=true:TP=-1.5:LRA=11:print_format=summary" \
-f null - 2>&1 | tail -n 12)

# Lesen Sie die Ausgabe von Normalize Zeile für Zeile und speichern Sie sie in Variablen
for line in "${normalize}"; do
    measured_I=$(echo "${line}" | awk -F' ' '/Input Integrated:/ {print $3}')
    measured_TP=$(echo "${line}" | awk -F' ' '/Input True Peak:/ {print $4}')
    measured_LRA=$(echo "${line}" | awk -F' ' '/Input LRA:/ {print $3}')
    measured_thresh=$(echo "${line}" | awk -F' ' '/Input Threshold:/ {print $3}')
    offset=$(echo "${line}" | awk -F' ' '/Target Offset:/ {print $3}')
done

# Standardwerte für Variablen, falls nicht definiert
audio_default="${infile_name}-normalized-$(date +"%Y-%m-%d-%H-%M-%S").${infile_ext}"
video_default="${infile_name}-normalized-$(date +"%Y-%m-%d-%H-%M-%S").mp4"


#===============================================================================
# Funktionen
#===============================================================================

# Audiofunktion
audio () {
    ffmpeg \
    -hide_banner \
    -stats -v panic \
    -i "${infile}" \
    -filter_complex \
    "loudnorm=I=-16:
    dual_mono=true:
    TP=-1.5:
    LRA=11:
    measured_I=${measured_I}:
    measured_LRA=${measured_LRA}:
    measured_TP=${measured_TP}:
    measured_thresh=${measured_thresh}:
    offset=${offset}:
    linear=true:
    print_format=summary [audio]" \
    -map "[audio]" \
    -ar 44100 \
    "${outfile:=${audio_default}}"
}

# Videofunktion
video () {
    ffmpeg \
    -hide_banner \
    -stats -v panic \
    -i "${infile}" \
    -c:v copy \
    -filter_complex \
    "loudnorm=I=-16:
    dual_mono=true:
    TP=-1.5:
    LRA=11:
    measured_I=${measured_I}:
    measured_LRA=${measured_LRA}:
    measured_TP=${measured_TP}:
    measured_thresh=${measured_thresh}:
    offset=${offset}:
    linear=true:
    print_format=summary [audio]" \
    -map 0:v -map "[audio]" \
    -ar 44100 \
    -pix_fmt yuv420p \
    -movflags +faststart \
    -f mp4 \
    "${outfile:=${video_default}}"
}

# Überprüfen Sie, ob der Mime-Typ Audio oder Video ist, und führen Sie dann die richtige Funktion aus
case "${filetype}" in
    "${mov_mime}"|"${mkv_mime}"|"${mp4_mime}"|"${m4v_mime}") video "${infile}";;
    "${wav_mime}"|"${audio_mime}"|"${aac_mime}"|"${m4a_mime}") audio "${infile}";;
    *) usage "${infile} ${NOT_MEDIA_FILE_ERR}";;
esac
