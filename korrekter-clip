#!/bin/sh

#===============================================================================
# correct-clip
# korrekter-clip
# Korrigieren Sie einen Videoclip mithilfe einer Gimp-Kurve
#===============================================================================

# Code basierend auf:
# https://video.stackexchange.com/questions/16352/converting-gimp-curves-files-to-photoshop-acv-for-ffmpeg/20005#20005

# in einen ffmpeg-Kurvenfilterbefehl umgewandelt
# zum Anpassen der Pegel und des Weißabgleichs

# erfordert eine Kurvendatei, die mit dem folgenden Skript erstellt wurde
# https://github.com/NapoleonWils0n/curve2ffmpeg

# Abhängigkeiten:
# ffmpeg file grep

#===============================================================================
# Verwendung von Skripten
#===============================================================================

usage()
{
# Wenn das Argument an die Funktion übergeben wird, echo es
[ -z "${1}" ] || echo "! ${1}"
echo "\
# Korrigieren Sie einen Videoclip mit einer Gimp-Kurve

# erfordert eine Kurvendatei, die mit dem folgenden Skript erstellt wurde
# https://github.com/NapoleonWils0n/curve2ffmpeg

$(basename "$0") -i eingang.(mp4|mkv|mov|m4v) -c kurve.txt -o ausgang.mp4
-i eingang.(mp4|mkv|mov|m4v)
-c kurve.txt
-o ausgang.mp4 : Optionales Argument
# Wenn die Option nicht angegeben wird, wird standardmäßig Eingabename-korrigiertes-Datum-Uhrzeit verwendet"
exit 2
}


#===============================================================================
# Fehlermeldungen
#===============================================================================

INVALID_OPT_ERR='Ungültige Option:'
REQ_ARG_ERR='erfordert eine Argumentation'
WRONG_ARGS_ERR='falsche Anzahl von Argumenten an Skript übergeben'
NOT_MEDIA_FILE_ERR='ist keine Mediendatei'
NOT_TEXT_FILE_ERR='ist keine Textdatei'


#===============================================================================
# Überprüfen Sie die Anzahl der an das Skript übergebenen Argumente
#===============================================================================

[ $# -gt 0 ] || usage "${WRONG_ARGS_ERR}"


#===============================================================================
# getopts überprüft die an das Skript übergebenen Optionen
#===============================================================================

while getopts ':i:c:o:h' opt
do
  case ${opt} in
     i) infile="${OPTARG}";;
     c) text="${OPTARG}";;
     o) outfile="${OPTARG}";;
     h) usage;;
     \?) echo "${INVALID_OPT_ERR} ${OPTARG}" 1>&2 && usage;;
     :) echo "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2 && usage;;
  esac
done
shift $((OPTIND-1))


#===============================================================================
# Variablen
#===============================================================================

# Eingabe, Eingabename
infile_nopath="${infile##*/}"
infile_name="${infile_nopath%.*}"

# Voreinstellungen für Variablen
outfile_default="${infile_name}-corrected-$(date +"%Y-%m-%d-%H-%M-%S").mp4"
# Überprüfen Sie, ob der libfdk_aac-Codec installiert ist, falls nicht, greifen Sie auf den aac-Codec zurück
aac_codec="$(ffmpeg -hide_banner -stats -v panic -h encoder=libfdk_aac)"
aac_error="Codec 'libfdk_aac' is not recognized by FFmpeg."
aac_check="$(echo "${aac_codec}" | grep "${aac_error}")"

# Überprüfen Sie die ffmpeg-AAC-Codecs
if [ -z "${aac_check}" ]; then
   aac='libfdk_aac' # libfdk_aac-Codec ist installiert
else
   aac='aac' # Der libfdk_aac-Codec ist nicht installiert, greifen Sie auf den aac-Codec zurück
fi


#===============================================================================
# Funktionen
#===============================================================================

correct_v () {
    ffmpeg \
    -hide_banner \
    -stats -v panic \
    -i "${infile}" \
    -filter_complex \
    "[0:v]${text_contents}[video]" \
    -map "[video]" \
    -c:v libx264 -preset fast \
    -profile:v high \
    -crf 18 -coder 1 \
    -pix_fmt yuv420p \
    -movflags +faststart \
    -f mp4 \
    "${outfile:=${outfile_default}}"
}

# korrekte Video- und Audiospuren
correct_va () {
    ffmpeg \
    -hide_banner \
    -stats -v panic \
    -i "${infile}" \
    -filter_complex \
    "[0:v]${text_contents}[video]" \
    -map "[video]" -map 0:a \
    -c:a "${aac}" \
    -c:v libx264 -preset fast \
    -profile:v high \
    -crf 18 -coder 1 \
    -pix_fmt yuv420p \
    -movflags +faststart \
    -f mp4 \
    "${outfile:=${outfile_default}}"
}

# file Befehl überprüft den MIME-Typ der Eingabedatei
filetype="$(file --mime-type -b "${infile}")"
textfile="$(file --mime-type -b "${text}")"

# Video-Mime-Typen
mov_mime='video/quicktime'
mkv_mime='video/x-matroska'
mp4_mime='video/mp4'
m4v_mime='video/x-m4v'

# Text-Mime-Typ
txt_mime='text/plain'

# Überprüfen Sie, ob der MIME-Typ der Datei ein Video ist
case "${filetype}" in
    "${mov_mime}"|"${mkv_mime}"|"${mp4_mime}"|"${m4v_mime}");;
    *) usage "${infile} ${NOT_MEDIA_FILE_ERR}";;
esac

# Überprüfen Sie, ob der MIME-Typ der Textdatei ein Text ist
case "${textfile}" in
    "${txt_mime}");;
    *) usage "${textfile} ${NOT_TEXT_FILE_ERR}";;
esac

# Lesen Sie den Inhalt der Kurventextdatei und speichern Sie ihn in einer Variablen
text_contents="$(while IFS= read -r line; do echo "${line}"; done < "${text}")"

# Überprüfen Sie, ob das Video eine Audiospur hat
audio_check="$(ffprobe -i "${infile}" -show_streams -select_streams a -loglevel error)"

# Prüfen Sie, ob audio_check null ist, was bedeutet, dass das Video keine Audiospur hat
if [ -z "${audio_check}" ]; then
   correct_v "${infile}" # Nullwert
else
   correct_va "${infile}" # Nicht-Null-Wert
fi
